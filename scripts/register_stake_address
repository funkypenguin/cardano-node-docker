#!/bin/bash

# From Documentation
# https://github.com/input-output-hk/cardano-tutorials/blob/master/node-setup/040_transactions.md
# https://github.com/input-output-hk/cardano-tutorials/blob/master/node-setup/050_register_key.md

# Init functions and vars

source /scripts/functions/check_balance
source /scripts/functions/check_address_registration
source /scripts/functions/wait_for_address_registration
source /scripts/functions/wait_for_slot
source /scripts/functions/wait_for_sync
source /scripts/init_node_vars

# Enter staking directory
cd ${NODE_PATH}/staking/
mkdir -p transactions

echo ""
echo "Submitting staking addresses to the blockchain."

# Check for required files
if [ ! -f "stake.vkey" ]; then
    echo "Missing required stake.vkey. You need to run \`generate_stake_address\` to generate this key."
    MISSING_FILES=1
fi

if [ ! -f "stake.skey" ]; then
    echo "Missing required stake.skey. You need to run \`generate_stake_address\` to generate this key."
    MISSING_FILES=1
fi

if [ ! -f "payment.skey" ]; then
    echo "Missing required payment.skey. You need to run \`generate_stake_address\` to generate this key."
    MISSING_FILES=1
fi

if [ ! -f "payment.addr" ]; then
    echo "Missing required payment.addr. You need to run \`generate_stake_address\` to generate this key."
    MISSING_FILES=1
fi

if [ -n "$MISSING_FILES" ]; then
    exit
fi

# Wait for node to sync
wait_for_sync 99

if [ -n "$(check_address_registration)" ]; then
    touch transactions/register_stake_address.submitted
    echo "Your stake address has already been registered in the blockchain."
    exit
fi

# Create an address registration certificate
if [ ! -f "${NODE_PATH}/staking/stake.cert" ]; then
    cardano-cli shelley stake-address registration-certificate \
        --staking-verification-key-file stake.vkey \
        --out-file stake.cert
    echo "Created stake.cert"
else
    echo "stake.cert certificate already exists."
fi

# Generate protocol
cardano-cli shelley query protocol-parameters \
    ${NETWORK_ARGUMENT} \
    --out-file protocol.json

# Get key-deposit
KEY_DEPOSIT=$(cat protocol.json  | grep keyDeposit | tr ' ' '\n' | tail -1 | sed 's/,//g')

# Get slot and TTL
SLOT=$(get_slot)
TTL=$(expr ${SLOT} + 500)

## Get the fee
FEE=$(cardano-cli shelley transaction calculate-min-fee \
    --tx-in-count 1 \
    --tx-out-count 1 \
    ${NETWORK_ARGUMENT} \
    --signing-key-file payment.skey \
    --signing-key-file stake.skey \
    --certificate-file stake.cert \
    --protocol-params-file protocol.json | tr ' ' '\n' | tail -1)
TOTAL_PRICE=$(expr ${FEE} + ${KEY_DEPOSIT})

echo "Fee is: ${FEE} Lovelace"
echo "Key-Deposit: ${KEY_DEPOSIT} Lovelace"
echo "Total Price is: ${TOTAL_PRICE}"

# Find UTXO in address with enough lovelace to do the transaction
ADDRESS=$(cat payment.addr)
check_balance

# Update slot and TTL
SLOT=$(get_slot)
TTL=$(expr ${SLOT} + 500)

# Display transaction info
REMAINING_AFTER_TX=$(expr ${LOVELACE} - ${TOTAL_PRICE})
echo "Creating transaction"
echo "UTXO: ${UTXO}#${TXIX}"
echo "Lovelace Holding: ${LOVELACE}"
echo "Lovelace after transaction: ${REMAINING_AFTER_TX}"
echo "Current slot: ${SLOT}"
echo "TTL: ${TTL}"

#
# Create the transaction
#
cardano-cli shelley transaction build-raw \
    --tx-in "${UTXO}#${TXIX}" \
    --tx-out $(cat payment.addr)+${REMAINING_AFTER_TX} \
    --ttl ${TTL} \
    --fee ${FEE} \
    --out-file transactions/register_stake_address.raw \
    --certificate-file stake.cert

# Sign the transaction
cardano-cli shelley transaction sign \
    --tx-body-file transactions/register_stake_address.raw \
    --signing-key-file payment.skey \
    --signing-key-file stake.skey \
    ${NETWORK_ARGUMENT} \
    --out-file transactions/register_stake_address.signed

# Submit the transaction
OUT=$(cardano-cli shelley transaction submit \
    --tx-file transactions/register_stake_address.signed \
    ${NETWORK_ARGUMENT})
echo "Transaction has been submitted to the blockchain."

if [[ $OUT =~ "Error" ]]
then
    echo "An error occoured."
    echo ${OUT}
else
    echo ${OUT}

    # Wait for blockchain to register the address
    wait_for_slot ${TTL}
    wait_for_address_registration
    touch transactions/register_stake_address.submitted
    echo "Your stake address is now registered in the blockchain."
fi